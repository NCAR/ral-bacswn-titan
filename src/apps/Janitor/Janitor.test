/**********************************************************************
 * TDRP params for Janitor
 **********************************************************************/

//======================================================================
//
// The Janitor is a program that does maintenance on data files.
//
// It is used to : 
//
// 	* Delete files that have not been modified for a certain time
// 	* Compress files that have not been accessed for a certain time
// 	* Leave data alone if it is listed in an eventlist as pertaining to
// 	  an interesting case.
//
// So there are three different times involved :
// 	 * The time since file modification, for deletion
// 	 * The time since file access, for compression, and
// 	 * The time the data pertains to, which is parsed from
// 	   the filename according to the RAP file naming convention.
//
// The Janitor operates by recursing under a top directory (usually
// defined by the RAP_DATA_DIR environment variable). As the Janitor
// recurses into a directory it looks for a file named _janitor and
// reads its parameters from it, if it exists. If it does not,
// then the parameters the janitor entered the directory with
// are used.
//
// Typically a user will specify a very complete _janitor file in the
// top directory. Directories lower in the tree typically
// contain _janitor files that only overwrite a few
// variables - the rest retain the values
// that were specified in the top level directory.
//
// At the time of writing, users may consult
// http://www.rap.ucar.edu/staff/oien/janitor.html
// for more information.
//
// Niles Oien, RAP, NCAR, August 1999 (oien@rap.ucar.edu).
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debugging messages will be printed.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "primary";

///////////// top_dir /////////////////////////////////
//
// Top level directory - defaults to DATA_DIR or RAP_DATA_DIR if not 
//   set.
//
// The Janitor traverses recursively from this directory downwards.
//
//
// Type: string
//

top_dir = "/tmp/junk";

///////////// once_only ///////////////////////////////
//
// Option to traverse the directories once and then exit.
//
// If false, the Janitor will repeatedly traverse the directory tree, 
//   with a delay of 'SleepBetweenPasses' between the passes. If true, the 
//   Janitor will make a single pass and then exit.
//
//
// Type: boolean
//

once_only = FALSE;

///////////// SleepBetweenPasses //////////////////////
//
// Sleep time between passes - secs.
//
// Janitor sleeps for this time between traversal passes of the 
//   directory structure. This is intended to prevent the Janitor from 
//   causing an excessive CPU load.
//
// Minimum val: 0
//
// Type: int
//

SleepBetweenPasses = 10;

///////////// SleepBetweenDirs ////////////////////////
//
// Sleep time between directories - secs.
//
// Janitor sleeps for this time as it moves between between directories. 
//   It is intended to prevent the Janitor from causing an excessive CPU 
//   load.
//
// Minimum val: 0
//
// Type: int
//

SleepBetweenDirs = 0;

//======================================================================
//
// TRAVERSING THE DIRECTORY TREE.
//
// Controlling the way the Janitor searches the directory tree for files 
//   to delete or compress.
//
//======================================================================
 
///////////// recurse /////////////////////////////////
//
// Recurse to lower directories.
//
// Set to false to leave directories below the current directory alone.
//
//
// Type: boolean
//

recurse = TRUE;

///////////// FollowDangerousLinks ////////////////////
//
// Follow path relative soft links ./ and ../.
//
// Setting this to true is dangerous if recurse is true. Beware of 
//   circular links.
//
//
// Type: boolean
//

FollowDangerousLinks = TRUE;

///////////// process /////////////////////////////////
//
// Process files in this directory.
//
// Set to false to leave the current directory alone. However, subdirs 
//   are processed unless the recurse parameter is set to false.
//
//
// Type: boolean
//

process = TRUE;

///////////// report //////////////////////////////////
//
// Option to place a report file in each directory visisted.
//
// If set, a file named _janitor_Report is written in the directory
// where the -janitor file was found. Note that this parameter
// does NOT recurse, that is, setting report=TRUE in the top directory
// will cause a _janitor_Report to be written to the top
// directory but not subdirectories.
//
// The _janitor_Report file is an ASCII report of the state of
// the janitor when it got to that directory.
//
//
// Type: boolean
//

report = FALSE;

//======================================================================
//
// FILE IDENTIFICATION.
//
// Controlling the way the Janitor finds files to delete or compress.
//
//======================================================================
 
///////////// check_ext ///////////////////////////////
//
// Option to check for file extension.
//
// If set, only files with the 'ext' extension are processed.
//
//
// Type: boolean
//

check_ext = FALSE;

///////////// ext /////////////////////////////////////
//
// Specified file extension. See 'check_ext'.
//
// The specified extension may optionally include the leading period.
//
//
// Type: string
//

ext = "";

///////////// date_format /////////////////////////////
//
// Option to check for RAP date-time naming convention.
//
// If set, the files must follow the RAP file naming
// convention (which means that the filename is based
// on the date that the data in the file pertains to).
//
//
// Type: boolean
//

date_format = TRUE;

///////////// file_ages_in_days ///////////////////////
//
// Option to specify file ages in days, instead of secs.
//
// If TRUE, 'MaxNoModDays' and 'MaxNoAccessDays' are used. If FALSE, 
//   'MaxModificationAgeBeforeDelete' and 'MaxAccessAgeBeforeCompress' are 
//   used.
//
//
// Type: boolean
//

file_ages_in_days = FALSE;

//======================================================================
//
// FILE DELETION.
//
// Option to delete files.
//
//======================================================================
 
///////////// delete_files ////////////////////////////
//
// Option to delete files.
//
// If set, files are deleted if their modification age exceeds 
//   MaxNoModDays, if set, or MaxModificationAgeBeforeDelete.
//
//
// Type: boolean
//

delete_files = FALSE;

///////////// MaxNoModDays ////////////////////////////
//
// Max file age before deletion - days. Used if 'file_ages_in_days' is 
//   TRUE.
//
// If delete_files is TRUE, a file will be deleted if it has not been 
//   modified in this amount of time.
//
//
// Type: double
//

MaxNoModDays = 30;

///////////// MaxModificationAgeBeforeDelete //////////
//
// Max file age before deletion - secs. Used if 'file_ages_in_days' is 
//   FALSE.
//
// If delete_files is TRUE, a file will be deleted if it has not been 
//   modified in this amount of time.
//
// Minimum val: 1
//
// Type: int
//

MaxModificationAgeBeforeDelete = 1728000;

///////////// disk_use_threshold //////////////////////
//
// Percentage full disk threshold.
//
// If this is exceeded, then the Janitor will start deleting the oldest 
//   files in the data repository until the disk usage percentage is below 
//   disk_delete_threshold.
//
// NOTE : This facility is only supported under LINUX. For other UNIX 
//   OS's the disk is assumed to be 0% full.
//
// Minimum val: 0
// Maximum val: 100
//
// Type: int
//

disk_use_threshold = 100;

///////////// disk_delete_threshold ///////////////////
//
// Percentage full disk threshold for deletions.
//
// If the disk is considered too full based on the disk_use_threshold 
//   parameter, the oldest files in the data repository will be deleted 
//   until the disk usage falls below this value. Note that files will 
//   only be deleted if they are not in an event list and are not in a 
//   directory with a disk_use_threshold of 100. Note that this value must 
//   be less than the disk_use_threshold value or your disk could fill up.
//
// Minimum val: 0
// Maximum val: 100
//
// Type: int
//

disk_delete_threshold = 100;

///////////// MaxNumFilesInDir ////////////////////////
//
// Maximum number of files allowed in a directory.
//
// If the number of files in a directory (after other deletion processes 
//   have completed) exceeds this number, then the oldest files (based 
//   upon modification time) will be deleted until the number of files 
//   left is equal to this value. When MaxNumFilesInDir is less than zero 
//   (the default) it will not be applied.  Setting MaxNumFilesInDir to 
//   zero will cause it to delete all files in a directory.  Files that 
//   begin with a '.' or '_' will not be included in the count. The value  
//   of 'delete_files' does not influence the behavior wrt.  
//   MaxNumFilesInDir.
//
// Minimum val: -1
//
// Type: int
//

MaxNumFilesInDir = -1;

//======================================================================
//
// DIRECTORY DELETION.
//
// Option to delete directories.
//
//======================================================================
 
///////////// RemoveEmptyDirs /////////////////////////
//
// Option to remove empty directories.
//
// If set, directories are removed if file deletion leaves them empty.
//
//
// Type: boolean
//

RemoveEmptyDirs = FALSE;

///////////// MaxDirAgeDays ///////////////////////////
//
// Max dir age before deletion - days. Used if 'file_ages_in_days' is 
//   TRUE.
//
// If RemoveEmptyDirs is TRUE, a dir will be deleted if it has not been 
//   modified in this amount of time.
//
//
// Type: double
//

MaxDirAgeDays = 0;

///////////// MaxDirAgeSecs ///////////////////////////
//
// Max dir age before deletion - secs. Used if 'file_ages_in_days' is 
//   FALSE.
//
// If RemoveEmptyDirs is TRUE, a dir will be deleted if it has not been 
//   modified in this amount of time.
//
//
// Type: int
//

MaxDirAgeSecs = 0;

//======================================================================
//
// FILE COMPRESSION.
//
// Option to compress files.
//
//======================================================================
 
///////////// compress ////////////////////////////////
//
// Should we compress files?.
//
// If set, files are compressed if their age indicates
// that they should be. Systems that do not decompress
// on the fly should avoid compression.
//
//
// Type: boolean
//

compress = FALSE;

///////////// CompressBasedOnAccessTime ///////////////
//
// Make compression decision based on access time.
//
// If TRUE, the compression decision will be made based on
// the latest ACCESS time of the file.
// See MaxNoAccessDays or MaxAccessAgeBeforeCompress.
// If FALSE, the compression decision will be made based on
//  the latest MODIFICATION time of the file.
// See MaxNoModDaysBeforeCompress or MaxNoModSecsBeforeCompress.
//
//
// Type: boolean
//

CompressBasedOnAccessTime = TRUE;

///////////// MaxNoAccessDays /////////////////////////
//
// Max quiescent age before compression - days. Used if 
//   'file_ages_in_days' is TRUE.
//
// If compress is TRUE, a file will be compressed if it has not been 
//   accessed within this time.
//
//
// Type: double
//

MaxNoAccessDays = 1;

///////////// MaxAccessAgeBeforeCompress //////////////
//
// Max quiescent age before compression - secs. Used if 
//   'file_ages_in_days' is FALSE.
//
// If compress is TRUE, a file will be compressed if it has not been 
//   accessed within this time.
//
// Minimum val: 1
//
// Type: int
//

MaxAccessAgeBeforeCompress = 86400;

///////////// MaxNoModDaysCompress ////////////////////
//
// Max file mod age before compression - days.
//
//  Used if 'file_ages_in_days' is TRUE. If compress is TRUE, a file 
//   will be compressed if it has not been modified in this amount of 
//   time.
//
//
// Type: double
//

MaxNoModDaysCompress = 30;

///////////// MaxNoModSecsCompress ////////////////////
//
// Max file mod age before compression - secs.
//
//  Used if 'file_ages_in_days' is FALSE. If compress is TRUE, a file 
//   will be compressed if it has not been modified in this amount of 
//   time.
//
//
// Type: int
//

MaxNoModSecsCompress = 1728000;

///////////// com_str /////////////////////////////////
//
// Compress command to be executed on files, with carat (^) for filename.
//
// Compress command to execute on files.
//
//
// Type: string
//

com_str = "gzip -f ^";

///////////// compressed_ext //////////////////////////
//
// Extension for compressed files.
//
// Extension for compressed files. The Janitor needs this to determine
// if a file has already been compressed. If a compression technique
// other than gzip is used, this may have to be changed (for instance
// if the compress command was used the extension should be .Z).
//
//
// Type: string
//

compressed_ext = ".gz";

///////////// sleep_factor ////////////////////////////
//
// Single int value.
//
// Sleep for sleep_factor*compression_time after compressing a file.
//
// Minimum val: 0
//
// Type: double
//

sleep_factor = 0.25;

//======================================================================
//
// EVENT LISTS.
//
//======================================================================
 
///////////// ProcessIfNoMaster ///////////////////////
//
// Single bool value.
//
// The Janitor will look for two eventlists. One is
// in the directory with the data it pertains to
// and is named _janitor_Eventlist, the other (master)
// eventlist is specified by the MasterEventsFile parameter
// and this may be on a disk that is remotely mounted.
//
// If for some reason the master eventlist file is not
// found, the user can specify that the Janitor is to
// do nothing by specifying ProcessIfNoMaster=FALSE.
//
//
// Type: boolean
//

ProcessIfNoMaster = TRUE;

///////////// ignoreEventlists ////////////////////////
//
// If this is set, ignore event lists.
//
// This parameter intended to be used to delete MM5 raw
// data, even if it is on an eventlist.
//
//
// Type: boolean
//

ignoreEventlists = FALSE;

///////////// MasterEventsFile ////////////////////////
//
// Single string value.
//
// Event list file.
//
//
// Type: string
//

MasterEventsFile = "$(HOME)/data/_janitor_Master_Eventlist";

//======================================================================
//
// CROSS MOUNT ISSUES.
//
//======================================================================
 
///////////// HostnameMustMatch ///////////////////////
//
// Set this to TRUE to force the host name to match the one
// specified by the Hostname parameter. The intent is to give some
// control over the processing of cross mounted directories. If
// a directory physically attached to a machine named Grasshopper is
// cross mounted on a machine named Monkey via nfs, and in that 
//   directory
// the _janitor file specifies that the hostname must be Grasshopper,
// then only the janitor from Grasshopper will be able to recurse
// into that directory. The janitor on Monkey will be denied access.
//
// The default is to set this to FALSE.
//
//
// Type: boolean
//

HostnameMustMatch = FALSE;

///////////// Hostname ////////////////////////////////
//
// The host name.
//
// See comments for HostnameMustMatch above.
//
//
// Type: string
//

Hostname = "MachineName";

///////////// UseLockfiles ////////////////////////////
//
// If this is set, use lock files to lock a directory.
//
// Default is not to do this.
//
//
// Type: boolean
//

UseLockfiles = FALSE;

//======================================================================
//
// CALL SCRIPT WHEN FILES ARE DELETED.
//
//======================================================================
 
///////////// call_script_on_file_deletion ////////////
//
// Option to spawn a script when a file is deleted.
//
// If TRUE, the script 'script_to_call' will be called each time a file 
//   is deleted.
//
//
// Type: boolean
//

call_script_on_file_deletion = TRUE;

///////////// script_to_call_on_file_deletion /////////
//
// Name of script to call if call_script_on_file_deletion is true.
//
// The script will be called with the args specified in 
//   script_arg_list[] and supplementary_args[] - see below.
//
//
// Type: string
//

script_to_call_on_file_deletion = "delete_script_example.py";

///////////// delete_script_arg_list //////////////////
//
// List of arguments to be passed to the delete script.
//
// The arg string is followed by the respective value, for example 
//   file_path. So on the command line, you could see '-file 
//   /tmp/data/filename.ext -dir /tmp/data -name filename.ext'. DATA_TIME 
//   is the time of the data in the file, if that can be deduced from the 
//   file name, and -1 if not. MOD_TIME is the latest mod time of the 
//   file.
//
//
// Type: struct
//   typedef struct {
//      delete_script_id_t id;
//        Options:
//          DELETE_DATA_TIME
//          DELETE_MOD_TIME
//          DELETE_DIR_PATH
//          DELETE_FILE_PATH
//          DELETE_FILE_NAME
//          DELETE_FILE_EXT
//      string str;
//   }
//
// 1D array - variable length.
//

delete_script_arg_list = {
  {
    id = DELETE_DATA_TIME,
    str = "--data_time"
  }
  ,
  {
    id = DELETE_MOD_TIME,
    str = "--mod_time"
  }
  ,
  {
    id = DELETE_DIR_PATH,
    str = "--dir"
  }
  ,
  {
    id = DELETE_FILE_PATH,
    str = "--path"
  }
  ,
  {
    id = DELETE_FILE_NAME,
    str = "--name"
  }
  ,
  {
    id = DELETE_FILE_EXT,
    str = "--ext"
  }
};

///////////// delete_supplementary_args ///////////////
//
// Supplementary arguments to be added to end of delete argument list.
//
// This allows you to add arbitrary command line arguments at the END of 
//   the list. So for example if you want to add a debug arg to your 
//   script, you could specify '-debug' as a supplementary arg. The 
//   supplementary args will appear on the command line in the order 
//   specified, wth spaces between them.
//
//
// Type: string
// 1D array - variable length.
//

delete_supplementary_args = {
 "--debug"
};

///////////// run_delete_script_in_background /////////
//
// Option to run delete script in background.
//
// If TRUE, the script will be run in the background. Therefore, the 
//   system call will return immediately. If FALSE, the Janitor will wait 
//   until the script completes before continuing execution.
//
//
// Type: boolean
//

run_delete_script_in_background = FALSE;

///////////// terminate_delete_script_if_hung /////////
//
// Option to terminate delete script if it hangs.
//
// If TRUE, the script will be killed if it does not return within 
//   'delete_script_max_run_secs'.
//
//
// Type: boolean
//

terminate_delete_script_if_hung = TRUE;

///////////// delete_script_max_run_secs //////////////
//
// Max time allowed for script - secs.
//
// If 'terminate_delete_script_if_hung' is TRUE, the script will be 
//   killed if it does not complete withing this number of secs.
//
//
// Type: int
//

delete_script_max_run_secs = 300;

