// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

/* RCS info
 *   $Author: dixon $
 *   $Locker:  $
 *   $Date: 2016/03/06 23:28:58 $
 *   $Id: NoiseGenerator.hh,v 1.3 2016/03/06 23:28:58 dixon Exp $
 *   $Revision: 1.3 $
 *   $State: Exp $
 */
 
/**-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**/

/************************************************************************
 * NoiseGenerator: class for generating random noise values for filling
 *             out the trec input grids.
 *
 * RAP, NCAR, Boulder CO
 *
 * November 2002
 *
 * Nancy Rehak
 *
 ************************************************************************/

#ifndef NoiseGenerator_HH
#define NoiseGenerator_HH

#include <rapmath/stats.h>
using namespace std;


class NoiseGenerator
{
 public:

  /**********************************************************************
   * Constructor
   */

  NoiseGenerator(const double data_center = 0.0,
		 const double del_dbz = 0.0);
  

  /**********************************************************************
   * Destructor
   */

  ~NoiseGenerator(void);
  

  //////////////////////
  // Accessor methods //
  //////////////////////

  /**********************************************************************
   * getNoiseValue() - Generate a noise value.
   */

  double getNoiseValue(void) const
  {
//    double random_num = (2.0 * NRran3(&seed)) - 1.0;
//    double random_num = (2.0 * _ranf()) - 1.0;
    double random_num = (2.0 * STATS_uniform_gen()) - 1.0; // dixon
	
    return _noiseCenter - (random_num * _noisePerturb);
  }
  

  /**********************************************************************
   * setCenterValue() - Set the data center value.  The noise values
   *                    generated by this object will be in the range:
   *
   *                             CenterValue +/- PerturbationValue
   */

  void setCenterValue(const double noise_center)
  {
    _noiseCenter = noise_center;
  }
  
  
  /**********************************************************************
   * setPerturbationValue() - Set the data perturbation value.  The noise
   *                          values generated by this object will be 
   *                          in the range:
   *
   *                             CenterValue +/- PerturbationValue
   */

  void setPerturbationValue(const double data_perturb)
  {
    _noisePerturb = data_perturb;
  }
  
  
 private:

  double _noiseCenter;
  double _noisePerturb;
  

};


#endif
